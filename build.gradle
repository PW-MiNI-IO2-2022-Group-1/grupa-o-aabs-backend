plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.auth0:java-jwt:3.8.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.assertj:assertj-core:3.22.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

task generateTestData() {
    doLast {
        File dataSql = file("src/main/resources/data-test2.sql")
        dataSql.write("")

        //vaccination slots
        for (int i = 1; i <= 10; i++) {
            dataSql.append("insert into vaccination_slot_entity (id, date, doctor_id) " +
                    "values (${i}, TIMESTAMPADD(DAY, ${i + 1}, current_timestamp()), ${(i % 2) + 1});\n")
        }

        //vaccinations
        for (int i = 1; i <= 5; i++) {
            dataSql.append("insert into vaccination_entity (id, status, patient_id, vaccination_slot_id, vaccine_id) " +
                    "values (${i}, 'Planned', ${(i % 2) + 1}, ${i}, ${(i % 4) + 1});\n")
        }
    }
}

